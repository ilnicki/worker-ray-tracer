!function(t){var e={};function r(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,r),s.l=!0,s.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)r.d(n,s,function(e){return t[e]}.bind(null,s));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=4)}([function(t,e,r){"use strict";r.d(e,"d",function(){return n}),r.d(e,"h",function(){return s}),r.d(e,"e",function(){return c}),r.d(e,"g",function(){return o}),r.d(e,"b",function(){return i}),r.d(e,"c",function(){return a}),r.d(e,"f",function(){return u}),r.d(e,"a",function(){return f});const n=(t,e,r)=>({x:t,y:e,z:r}),s=(t,e)=>n(t*e.x,t*e.y,t*e.z),c=(t,e)=>n(t.x-e.x,t.y-e.y,t.z-e.z),o=(t,e)=>n(t.x+e.x,t.y+e.y,t.z+e.z),i=(t,e)=>t.x*e.x+t.y*e.y+t.z*e.z,a=t=>Math.sqrt(Math.pow(t.x,2)+Math.pow(t.y,2)+Math.pow(t.z,2)),u=t=>{const e=a(t);return s(0===e?1/0:1/e,t)},f=(t,e)=>n(t.y*e.z-t.z*e.y,t.z*e.x-t.x*e.z,t.x*e.y-t.y*e.x)},function(t,e,r){"use strict";r.d(e,"j",function(){return n}),r.d(e,"e",function(){return s}),r.d(e,"b",function(){return c}),r.d(e,"a",function(){return o}),r.d(e,"c",function(){return i}),r.d(e,"g",function(){return a}),r.d(e,"f",function(){return u}),r.d(e,"h",function(){return f}),r.d(e,"i",function(){return d}),r.d(e,"d",function(){return h});const n={r:1,g:1,b:1},s={r:.5,g:.5,b:.5},c={r:0,g:0,b:0},o=c,i=c,a=(t,e)=>({r:t*e.r,g:t*e.g,b:t*e.b}),u=(t,e)=>({r:t.r+e.r,g:t.g+e.g,b:t.b+e.b}),f=(t,e)=>({r:t.r*e.r,g:t.g*e.g,b:t.b*e.b}),d=t=>({r:Math.floor(255*Math.min(1,t.r)),g:Math.floor(255*Math.min(1,t.g)),b:Math.floor(255*Math.min(1,t.b))}),h=t=>(t=>({r:(t>>16&255)/255,g:(t>>8&255)/255,b:(255&t)/255}))(parseInt(t,16))},function(t,e,r){"use strict";r.d(e,"a",function(){return s}),r.d(e,"b",function(){return c});var n=r(0);const s=(t,e,r)=>({handlerId:"sphere",surfaceId:r,center:t,radius2:Math.pow(e,2)}),c={intersect:(t,e)=>{const r=Object(n.e)(e.center,t.start),s=Object(n.b)(r,t.dir);let c=0;if(s>=0){const t=e.radius2-(Object(n.b)(r,r)-s*s);t>=0&&(c=s-Math.sqrt(t))}return 0!==c?c:null},normal:(t,e)=>Object(n.f)(Object(n.e)(t,e.center))}},function(t,e,r){"use strict";r.d(e,"a",function(){return s}),r.d(e,"b",function(){return c});var n=r(0);const s=(t,e,r)=>({handlerId:"plane",surfaceId:r,normal:Object(n.f)(t),offset:e}),c={intersect:(t,e)=>{const r=Object(n.b)(e.normal,t.dir);return r>0?null:(Object(n.b)(e.normal,t.start)+e.offset)/-r},normal:(t,e)=>e.normal}},function(t,e,r){"use strict";r.r(e);var n=r(3),s=r(2);const c={plane:n.b,sphere:s.b};var o=r(1);const i=t=>()=>t,a={shiny:{diffuse:i(o.j),specular:i(o.e),reflect:i(.7),roughness:250},matt:{diffuse:i(o.j),specular:i(o.b),reflect:i(.01),roughness:900},checkerboard:{diffuse:t=>(Math.floor(t.z)+Math.floor(t.x))%2!=0?o.j:o.b,specular:i(o.j),reflect:t=>(Math.floor(t.z)+Math.floor(t.x))%2!=0?.15:.5,roughness:150}};var u=r(0);class f{constructor(){this.maxDepth=5,this.surfaces=a,this.bodies=c}tracePoint(t,e){return o.i(this.traceRay({start:this.scene.camera.pos,dir:this.getPoint(t,e)},0))}getPoint(t,e){return Object(u.f)(Object(u.g)(this.scene.camera.forward,Object(u.g)(Object(u.h)((t-this.scene.camera.width/2)/2/this.scene.camera.width,this.scene.camera.right),Object(u.h)(-(e-this.scene.camera.height/2)/2/this.scene.camera.height,this.scene.camera.up))))}intersections(t){const e={body:null,ray:t,dist:1/0};for(const r of this.scene.bodies){const n=this.bodies[r.handlerId].intersect(t,r);(!e||null!==n&&n<e.dist)&&(e.dist=n,e.body=r)}return e.body&&e}testRay(t){const e=this.intersections(t);return e?e.dist:null}traceRay(t,e){const r=this.intersections(t);return r?this.shade(r,e):o.a}shade(t,e){const r=t.ray.dir,n=this.bodies[t.body.handlerId],s=Object(u.g)(Object(u.h)(t.dist,r),t.ray.start),c=n.normal(s,t.body),i=Object(u.e)(r,Object(u.h)(2,Object(u.h)(Object(u.b)(c,r),c))),a=o.f(o.a,this.getNaturalColor(t.body,s,c,i)),f=e>=this.maxDepth?o.e:this.getReflectionColor(t.body,s,i,e);return o.f(a,f)}getReflectionColor(t,e,r,n){return o.g(this.surfaces[t.surfaceId].reflect(e),this.traceRay({start:e,dir:r},n+1))}getNaturalColor(t,e,r,n){const s=this.surfaces[t.surfaceId];return this.scene.lights.reduce((t,c)=>{const i=Object(u.e)(c.pos,e),a=Object(u.f)(i),f=this.testRay({start:e,dir:a});if(f&&Object(u.c)(i)>f)return t;{const i=Object(u.b)(a,r),f=i>0?o.g(i,c.color):o.c,d=Object(u.b)(a,Object(u.f)(n)),h=d>0?o.g(Math.pow(d,s.roughness),c.color):o.c;return o.f(t,o.f(o.h(s.diffuse(e),f),o.h(s.specular(e),h)))}},o.c)}}class d{constructor(t){this.pointer=0,this.data=t.data}append(t){this.data[this.pointer++]=t.r,this.data[this.pointer++]=t.g,this.data[this.pointer++]=t.b,this.data[this.pointer++]=255}}(new class{constructor(){this.tracer=new f}attachTo(t){t.addEventListener("message",({data:e})=>{if(this.isSceneSetting(e))this.tracer.scene=e.scene,t.postMessage(null);else if(this.isCameraSetting(e))this.tracer.scene.camera=e.camera,t.postMessage(null);else if(this.isRectTrace(e)){const r={x:e.rect.x,y:e.rect.y},n=new ImageData(new Uint8ClampedArray(4*e.rect.w*e.rect.h),e.rect.w,e.rect.h),s=new d(n);for(let t=r.y;t<r.y+n.height;t++)for(let e=r.x;e<r.x+n.width;e++)s.append(this.tracer.tracePoint(e,t));t.postMessage({position:r,image:n},[n.data.buffer])}})}isRectTrace(t){return"object"==typeof t&&t.hasOwnProperty("rect")}isSceneSetting(t){return"object"==typeof t&&t.hasOwnProperty("scene")}isCameraSetting(t){return"object"==typeof t&&t.hasOwnProperty("camera")}}).attachTo({postMessage:postMessage.bind(void 0),addEventListener:addEventListener.bind(void 0)})}]);