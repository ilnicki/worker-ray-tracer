!function(t){var e={};function r(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,r),s.l=!0,s.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)r.d(n,s,function(e){return t[e]}.bind(null,s));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=4)}([function(t,e,r){"use strict";r.d(e,"g",function(){return n}),r.d(e,"d",function(){return s}),r.d(e,"f",function(){return c}),r.d(e,"b",function(){return i}),r.d(e,"c",function(){return a}),r.d(e,"e",function(){return o}),r.d(e,"a",function(){return u});const n=(t,e)=>({x:t*e.x,y:t*e.y,z:t*e.z}),s=(t,e)=>({x:t.x-e.x,y:t.y-e.y,z:t.z-e.z}),c=(t,e)=>({x:t.x+e.x,y:t.y+e.y,z:t.z+e.z}),i=(t,e)=>t.x*e.x+t.y*e.y+t.z*e.z,a=t=>Math.sqrt(t.x*t.x+t.y*t.y+t.z*t.z),o=t=>{const e=a(t);return n(0===e?1/0:1/e,t)},u=(t,e)=>({x:t.y*e.z-t.z*e.y,y:t.z*e.x-t.x*e.z,z:t.x*e.y-t.y*e.x})},function(t,e,r){"use strict";r.d(e,"j",function(){return n}),r.d(e,"e",function(){return s}),r.d(e,"b",function(){return c}),r.d(e,"a",function(){return i}),r.d(e,"c",function(){return a}),r.d(e,"g",function(){return o}),r.d(e,"f",function(){return u}),r.d(e,"h",function(){return d}),r.d(e,"i",function(){return f}),r.d(e,"d",function(){return h});const n={r:1,g:1,b:1},s={r:.5,g:.5,b:.5},c={r:0,g:0,b:0},i=c,a=c,o=(t,e)=>({r:t*e.r,g:t*e.g,b:t*e.b}),u=(t,e)=>({r:t.r+e.r,g:t.g+e.g,b:t.b+e.b}),d=(t,e)=>({r:t.r*e.r,g:t.g*e.g,b:t.b*e.b}),f=t=>({r:Math.floor(255*Math.min(1,t.r)),g:Math.floor(255*Math.min(1,t.g)),b:Math.floor(255*Math.min(1,t.b))}),h=t=>(t=>({r:(t>>16&255)/255,g:(t>>8&255)/255,b:(255&t)/255}))(parseInt(t,16))},function(t,e,r){"use strict";r.d(e,"a",function(){return s}),r.d(e,"b",function(){return c});var n=r(0);const s=(t,e,r)=>({handlerId:"sphere",surfaceId:r,center:t,radius2:Math.pow(e,2)}),c={intersect(t,e){const r=Object(n.d)(e.center,t.start),s=Object(n.b)(r,t.dir);let c=0;if(s>=0){const t=e.radius2-(Object(n.b)(r,r)-s*s);t>=0&&(c=s-Math.sqrt(t))}return 0!==c?{body:e,ray:t,dist:c}:null},normal:(t,e)=>Object(n.e)(Object(n.d)(t,e.center))}},function(t,e,r){"use strict";r.d(e,"a",function(){return s}),r.d(e,"b",function(){return c});var n=r(0);const s=(t,e,r)=>({handlerId:"plane",surfaceId:r,norm:t,offset:e}),c={intersect(t,e){const r=Object(n.b)(e.norm,t.dir);if(r>0)return null;return{body:e,ray:t,dist:(Object(n.b)(e.norm,t.start)+e.offset)/-r}},normal:(t,e)=>e.norm}},function(t,e,r){"use strict";r.r(e);var n=r(3),s=r(2);const c={plane:n.b,sphere:s.b};var i=r(1);const a=t=>()=>t,o={shiny:{diffuse:a(i.j),specular:a(i.e),reflect:a(.7),roughness:250},matt:{diffuse:a(i.j),specular:a(i.b),reflect:a(.01),roughness:900},checkerboard:{diffuse:t=>(Math.floor(t.z)+Math.floor(t.x))%2!=0?i.j:i.b,specular:a(i.j),reflect:t=>(Math.floor(t.z)+Math.floor(t.x))%2!=0?.1:.7,roughness:150}};var u=r(0);class d{constructor(){this.maxDepth=5,this.surfaces=o,this.bodies=c}tracePoint(t,e){return i.i(this.traceRay({start:this.scene.camera.pos,dir:this.getPoint(t,e)},0))}getPoint(t,e){return Object(u.e)(Object(u.f)(this.scene.camera.forward,Object(u.f)(Object(u.g)((t-this.scene.camera.width/2)/2/this.scene.camera.width,this.scene.camera.right),Object(u.g)(-(e-this.scene.camera.height/2)/2/this.scene.camera.height,this.scene.camera.up))))}intersections(t){return this.scene.bodies.map(e=>this.bodies[e.handlerId].intersect(t,e)).reduce((t,e)=>!t||e&&e.dist<t.dist?e:t,null)}testRay(t){const e=this.intersections(t);return e?e.dist:null}traceRay(t,e){const r=this.intersections(t);return r?this.shade(r,e):i.a}shade(t,e){const r=t.ray.dir,n=Object(u.f)(Object(u.g)(t.dist,r),t.ray.start),s=this.bodies[t.body.handlerId].normal(n,t.body),c=Object(u.d)(r,Object(u.g)(2,Object(u.g)(Object(u.b)(s,r),s))),a=i.f(i.a,this.getNaturalColor(t.body,n,s,c)),o=e>=this.maxDepth?i.e:this.getReflectionColor(t.body,n,c,e);return i.f(a,o)}getReflectionColor(t,e,r,n){return i.g(this.surfaces[t.surfaceId].reflect(e),this.traceRay({start:e,dir:r},n+1))}getNaturalColor(t,e,r,n){return this.scene.lights.reduce((s,c)=>{const a=Object(u.d)(c.pos,e),o=Object(u.e)(a),d=this.testRay({start:e,dir:o});if(!!d&&d<=Object(u.c)(a))return s;{const a=Object(u.b)(o,r),d=a>0?i.g(a,c.color):i.c,f=Object(u.b)(o,Object(u.e)(n)),h=f>0?i.g(Math.pow(f,this.surfaces[t.surfaceId].roughness),c.color):i.c;return i.f(s,i.f(i.h(this.surfaces[t.surfaceId].diffuse(e),d),i.h(this.surfaces[t.surfaceId].specular(e),h)))}},i.c)}}class f{constructor(t){this.pointer=0,this.data=t.data}append(t){this.data[this.pointer++]=t.r,this.data[this.pointer++]=t.g,this.data[this.pointer++]=t.b,this.data[this.pointer++]=255}}(new class{constructor(){this.tracer=new d}attachTo(t){t.addEventListener("message",({data:e})=>{if(this.isSceneSetting(e))this.tracer.scene=e.scene,t.postMessage(null);else if(this.isCameraSetting(e))this.tracer.scene.camera=e.camera,t.postMessage(null);else if(this.isRectTrace(e)){const r={x:e.rect.x,y:e.rect.y},n=new ImageData(new Uint8ClampedArray(4*e.rect.w*e.rect.h),e.rect.w,e.rect.h),s=new f(n);for(let t=r.y;t<r.y+n.height;t++)for(let e=r.x;e<r.x+n.width;e++)s.append(this.tracer.tracePoint(e,t));t.postMessage({position:r,image:n},[n.data.buffer])}})}isRectTrace(t){return"object"==typeof t&&t.hasOwnProperty("rect")}isSceneSetting(t){return"object"==typeof t&&t.hasOwnProperty("scene")}isCameraSetting(t){return"object"==typeof t&&t.hasOwnProperty("camera")}}).attachTo({postMessage:postMessage.bind(void 0),addEventListener:addEventListener.bind(void 0)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,