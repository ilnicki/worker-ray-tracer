!function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=5)}([function(t,e,r){"use strict";r.d(e,"g",function(){return n}),r.d(e,"d",function(){return o}),r.d(e,"f",function(){return c}),r.d(e,"b",function(){return i}),r.d(e,"c",function(){return u}),r.d(e,"e",function(){return s}),r.d(e,"a",function(){return a});const n=(t,e)=>({x:t*e.x,y:t*e.y,z:t*e.z}),o=(t,e)=>({x:t.x-e.x,y:t.y-e.y,z:t.z-e.z}),c=(t,e)=>({x:t.x+e.x,y:t.y+e.y,z:t.z+e.z}),i=(t,e)=>t.x*e.x+t.y*e.y+t.z*e.z,u=t=>Math.sqrt(t.x*t.x+t.y*t.y+t.z*t.z),s=t=>{const e=u(t);return n(0===e?1/0:1/e,t)},a=(t,e)=>({x:t.y*e.z-t.z*e.y,y:t.z*e.x-t.x*e.z,z:t.x*e.y-t.y*e.x})},function(t,e,r){"use strict";r.d(e,"j",function(){return n}),r.d(e,"e",function(){return o}),r.d(e,"b",function(){return c}),r.d(e,"a",function(){return i}),r.d(e,"c",function(){return u}),r.d(e,"g",function(){return s}),r.d(e,"f",function(){return a}),r.d(e,"h",function(){return d}),r.d(e,"i",function(){return l}),r.d(e,"d",function(){return f});const n={r:1,g:1,b:1},o={r:.5,g:.5,b:.5},c={r:0,g:0,b:0},i=c,u=c,s=(t,e)=>({r:t*e.r,g:t*e.g,b:t*e.b}),a=(t,e)=>({r:t.r+e.r,g:t.g+e.g,b:t.b+e.b}),d=(t,e)=>({r:t.r*e.r,g:t.g*e.g,b:t.b*e.b}),l=t=>({r:Math.floor(255*Math.min(1,t.r)),g:Math.floor(255*Math.min(1,t.g)),b:Math.floor(255*Math.min(1,t.b))}),f=t=>(t=>({r:(t>>16&255)/255,g:(t>>8&255)/255,b:(255&t)/255}))(parseInt(t,16))},function(t,e,r){"use strict";r.d(e,"a",function(){return o}),r.d(e,"b",function(){return c});var n=r(0);const o=(t,e,r)=>({handlerId:"sphere",surfaceId:r,center:t,radius2:Math.pow(e,2)}),c={intersect(t,e){const r=Object(n.d)(e.center,t.start),o=Object(n.b)(r,t.dir);let c=0;if(o>=0){const t=e.radius2-(Object(n.b)(r,r)-o*o);t>=0&&(c=o-Math.sqrt(t))}return 0!==c?{body:e,ray:t,dist:c}:null},normal:(t,e)=>Object(n.e)(Object(n.d)(t,e.center))}},function(t,e,r){"use strict";r.d(e,"a",function(){return o}),r.d(e,"b",function(){return c});var n=r(0);const o=(t,e,r)=>({handlerId:"plane",surfaceId:r,norm:t,offset:e}),c={intersect(t,e){const r=Object(n.b)(e.norm,t.dir);if(r>0)return null;return{body:e,ray:t,dist:(Object(n.b)(e.norm,t.start)+e.offset)/-r}},normal:(t,e)=>e.norm}},,function(t,e,r){"use strict";r.r(e);class n{constructor(){this.items=new Array(16)}enqueue(t){this.items.push(t)}dequeue(){return this.items.shift()||[]}}var o=r(0);const c={x:0,y:-1,z:0};var i=r(1),u=r(3),s=r(2);class a{constructor(){this.worker=new Worker("worker.bundle.js")}setScene(t){return new Promise(e=>{this.worker.postMessage({scene:t}),this.worker.addEventListener("message",()=>e(null),{once:!0})})}setCamera(t){return new Promise(e=>{this.worker.postMessage({camera:t}),this.worker.addEventListener("message",()=>e(null),{once:!0})})}traceRect(t){return new Promise(e=>{this.worker.postMessage({rect:t}),this.worker.addEventListener("message",({data:t})=>e(t),{once:!0})})}}class d{constructor(t){this.pool=Array(t).fill(null).map(()=>new a)}setScene(t){return Promise.all(this.pool.map(e=>e.setScene(t))).then(()=>null)}setCamera(t){return this.camera=t,Promise.all(this.pool.map(e=>e.setCamera(t))).then(()=>null)}trace(){return Promise.all(this.pool.map((t,e,{length:r})=>t.traceRect({x:0,y:Math.floor(this.camera.height/r*e),w:this.camera.width,h:Math.ceil(this.camera.height/r)})))}}var l=function(t,e,r,n){return new(r||(r=Promise))(function(o,c){function i(t){try{s(n.next(t))}catch(t){c(t)}}function u(t){try{s(n.throw(t))}catch(t){c(t)}}function s(t){t.done?o(t.value):new r(function(e){e(t.value)}).then(i,u)}s((n=n.apply(t,e||[])).next())})};const f=4,h=3,b=5,y={x:-1,y:.5,z:0},m=(t,e,r)=>((t,e,r,n)=>{const i=Object(o.e)(Object(o.d)(e,t)),u=Object(o.g)(1.5,Object(o.e)(Object(o.a)(i,c)));return{pos:t,forward:i,right:u,up:Object(o.g)(1.5,Object(o.e)(Object(o.a)(i,u))),width:r,height:n}})({x:Math.cos(r)*(f-y.x)-Math.sin(r)*(b-y.z)+y.x,y:h,z:Math.sin(r)*(f-y.x)+Math.cos(r)*(b-y.z)+y.z},y,t,e);document.body.onload=(()=>l(void 0,void 0,void 0,function*(){const t=document.getElementById("canvas");if(!t.getContext)throw new Error("Application can not be drawn.");{const e=t.getContext("2d"),r=new d(4),o=new n,c=()=>window.requestAnimationFrame(()=>{o.dequeue().forEach(({position:{x:t,y:r},image:n})=>{e.putImageData(n,t,r)}),c()});setTimeout(c,3e3);const a=(()=>({bodies:[Object(u.a)({x:0,y:1,z:0},0,"checkerboard"),Object(s.a)({x:0,y:1,z:-.25},1,"shiny"),Object(s.a)({x:-1,y:.5,z:1.5},.5,"shiny"),Object(s.a)({x:-4,y:.7,z:-1.5},.7,"matt")],lights:[{pos:{x:-2,y:2.5,z:0},color:Object(i.d)("7d1212")},{pos:{x:1.5,y:2.5,z:1.5},color:Object(i.d)("12127d")},{pos:{x:1.5,y:2.5,z:-1.5},color:Object(i.d)("127d12")},{pos:{x:0,y:3.5,z:0},color:Object(i.d)("363659")}]}))();yield r.setScene(a);for(let e=0;e<10;e+=.01){const n=m(t.width,t.height,e);yield r.setCamera(n),yield r.trace().then(t=>o.enqueue(t))}}}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,